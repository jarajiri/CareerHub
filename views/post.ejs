<!DOCTYPE html>
<html lang="ko">
    <head>
        <%- include('include/head')%>

        <link rel="stylesheet" href="/static/css/detail.css" />
        <link rel="stylesheet" href="/static/css/post.css" />
        <script src="/static/js/detail.js"></script>

        <title><%=data.company_name%> 정보</title>
    </head>
    <body>
        <%- include('include/header')%>

        <!-- 회사 정보 -->
        <div class="company">
            <div class="imgContainer">
                <img
                    class="companyImg"
                    src="<%=data.img_path%>"
                    alt="회사 로고"
                />
            </div>
            <p class="companyName"><%=data.company_name%></p>
            <p class="experienceLevel"></p>
            <div class="likeCount">❤ <%=data.cnt_likes%></div>
        </div>
        <br />
        <!-- 본문 -->
        <div class="content mainBlock">
            <!-- 본문 조회 -->
            <div class="viewContent">
                <div class="introduce">
                    <h2>👨‍💻 회사 소개</h2>
                    <p><%=data.introduce%></p>
                </div>
                <div class="task">
                    <h2>📌 담당 업무</h2>
                    <p><%=data.task%></p>
                </div>
                <div class="condition">
                    <h2>📜 자격 요건</h2>
                    <p><%=data.conditions%></p>
                </div>
                <div class="preferentialTreatment">
                    <h2>👍 우대 사항</h2>
                    <p><%=data.prefer%></p>
                </div>
                <div class="skills">
                    <h2>🔧 기술 스택</h2>
                </div>
                <div class="welfare">
                    <h2>✨ 회사 복지</h2>
                    <p><%=data.welfare%></p>
                </div>
                <div class="deadline">
                    <h2>📅 마감일</h2>
                    <p><%=data.deadline%></p>
                </div>
                <div class="location">
                    <h2>📍 위치</h2>
                    <p class="address">
                        <%=data.address%> <%=data.address_detail%>
                    </p>
                    <div id="map" style="color: #000"></div>
                </div>
                <div class="source">
                    <h2>📎 공고 출처</h2>
                    <p class="hiddenC"><%=data.source%></p>
                    <a class="link" href="<%=data.source%>" target="_blank">
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            width="16"
                            height="16"
                            fill="currentColor"
                            class="bi bi-box-arrow-up-right"
                            viewBox="0 0 16 16"
                        >
                            <path
                                fill-rule="evenodd"
                                d="M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5"
                            />
                            <path
                                fill-rule="evenodd"
                                d="M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0z"
                            />
                        </svg>
                        <%=data.source%>
                    </a>
                </div>
                <div class="other">
                    <h2>💡 기타 추가 정보</h2>
                    <p><%=data.others%></p>
                </div>
            </div>
            <!-- 본문 수정 -->
            <div class="editContent hidden">
                <form name="editContent">
                    <h2>📕 회사 로고</h2>
                    <img
                        id="resultImage"
                        src="<%=data.img_path%>"
                        alt="회사 로고"
                        width="100"
                        height="100"
                        class="profile"
                    />

                    <span class="filebox">
                        <label for="img_path" class="input-file-button">
                            회사 로고 업로드
                        </label>
                        <input
                            type="file"
                            id="img_path"
                            name="img_path"
                            onchange="fileUpload()"
                            style="display: none"
                        />
                    </span>
                    <br />

                    <h2>📗 회사명</h2>
                    <input
                        type="text"
                        name="company_name"
                        placeholder="회사명을 입력해주세요"
                        class="text-input"
                        value="<%=data.company_name%>"
                        required
                    />
                    <br />

                    <h2>📘 경력</h2>
                    <div name="form-check-label">
                        <label class="form-check-label">
                            <input
                                type="radio"
                                name="levels"
                                value="신입"
                                class="form-check-input"
                                id="level_1"
                            />
                            신입
                        </label>
                        <label class="form-check-label">
                            <input
                                type="radio"
                                name="levels"
                                value="경력"
                                class="form-check-input"
                                id="level_2"
                            />
                            경력
                        </label>
                        <label class="form-check-label">
                            <input
                                type="radio"
                                name="levels"
                                value="무관"
                                class="form-check-input"
                                id="level_3"
                            />
                            경력 무관
                        </label>
                    </div>

                    <h2>👨‍💻 회사 소개</h2>
                    <textarea
                        name="introduce"
                        placeholder="회사에 대한 소개를 적어주세요"
                        class="textarea-input"
                        style="resize: none"
                    >
<%=data.introduce%></textarea
                    >

                    <h2>📌 담당 업무</h2>
                    <textarea
                        name="task"
                        placeholder="회사에 입사하면 어떤 일을 하게 되나요?"
                        class="textarea-input"
                        style="resize: none"
                    >
<%=data.task%></textarea
                    >

                    <h2>📜 자격요건</h2>
                    <textarea
                        name="conditions"
                        placeholder="회사에 입사하려면 어떤 준비가 되어있어야 하나요?"
                        class="textarea-input"
                        style="resize: none"
                    >
<%=data.conditions%></textarea
                    >

                    <h2>👍 우대 사항</h2>
                    <textarea
                        name="prefer"
                        placeholder="회사에 입사하는데 우대하는 사항은 무엇인가요?"
                        class="textarea-input"
                        style="resize: none"
                    >
<%=data.prefer%></textarea
                    >

                    <!-- 스택 박스 -->
                    <h2>🔧 기술 스택</h2>
                    <div class="Checkbox" id="stackButtons">
                        <input
                            type="checkbox"
                            name="stack"
                            id="React"
                            value="React"
                            class="form-check-input"
                            style="resize: none"
                        />
                        <label for="React" class="form-check-label button-label"
                            >React</label
                        >

                        <input
                            type="checkbox"
                            name="stack"
                            id="Vue"
                            value="Vue"
                            class="form-check-input"
                        />
                        <label for="Vue" class="form-check-label button-label"
                            >Vue</label
                        >

                        <input
                            type="checkbox"
                            name="stack"
                            id="CSS"
                            value="CSS"
                            class="form-check-input"
                        />
                        <label for="CSS" class="form-check-label button-label"
                            >CSS</label
                        >

                        <input
                            type="checkbox"
                            name="stack"
                            id="Angular"
                            value="Angular"
                            class="form-check-input"
                        />
                        <label
                            for="Angular"
                            class="form-check-label button-label"
                            >Angular</label
                        >

                        <input
                            type="checkbox"
                            name="stack"
                            id="JavaScript"
                            value="JavaScript"
                            class="form-check-input"
                        />
                        <label
                            for="JavaScript"
                            class="form-check-label button-label"
                            >JavaScript</label
                        >

                        <input
                            type="checkbox"
                            name="stack"
                            id="HTML"
                            value="HTML"
                            class="form-check-input"
                        />
                        <label for="HTML" class="form-check-label button-label"
                            >HTML</label
                        >

                        <input
                            type="checkbox"
                            name="stack"
                            id="TypeScript"
                            value="TypeScript"
                            class="form-check-input"
                        />
                        <label
                            for="TypeScript"
                            class="form-check-label button-label"
                            >TypeScript</label
                        >

                        <input
                            type="checkbox"
                            name="stack"
                            id="Sass"
                            value="Sass"
                            class="form-check-input"
                        />
                        <label for="Sass" class="form-check-label button-label"
                            >Sass</label
                        >

                        <input
                            type="checkbox"
                            name="stack"
                            id="JSX"
                            value="JSX"
                            class="form-check-input"
                        />
                        <label for="JSX" class="form-check-label button-label"
                            >JSX</label
                        >

                        <input
                            type="checkbox"
                            name="stack"
                            id="Webpack"
                            value="Webpack"
                            class="form-check-input"
                        />
                        <label
                            for="Webpack"
                            class="form-check-label button-label"
                            >Webpack</label
                        >
                    </div>

                    <h2>✨ 회사 복지</h2>
                    <textarea
                        name="welfare"
                        placeholder="어떤 복지와 혜택이 있나요?"
                        class="textarea-input"
                        style="resize: none"
                    >
<%=data.welfare%></textarea
                    >

                    <h2>📅 마감일</h2>
                    <input
                        type="datetime-local"
                        id="deadline"
                        name="deadline"
                        value=""
                        required
                    />
                    까지

                    <h2>📍 위치</h2>

                    <div id="mapEdit" style="color: #000"></div>
                    <br />
                    <!-- 주소 검색 버튼 -->
                    <input
                        type="button"
                        class="input-file-button"
                        onclick="sample5_execDaumPostcode()"
                        value="주소 검색"
                    />
                    <!-- 현위치 버튼 -->
                    <input
                        type="button"
                        class="input-file-button"
                        onclick="getCurrentLocation()"
                        value="현위치 찾기"
                    /><br /><br />

                    <!-- 주소 입력 필드 -->
                    <input
                        type="text"
                        name="address"
                        id="sample5_address"
                        placeholder="키워드 검색 후 해당 장소를 클릭하시면 주소가 기입됩니다"
                        value="<%=data.address%>"
                        class="text-input"
                        readonly
                    /><br /><br />
                    <!-- 상세 주소 입력 필드 -->
                    <input
                        type="text"
                        name="address_detail"
                        placeholder="상세 주소를 적어주세요 (선택)"
                        value="<%=data.address_detail%>"
                        class="text-input"
                    /><br /><br />

                    <h2>📎 공고 출처</h2>
                    <input
                        type="text"
                        name="source"
                        placeholder="어떤 사이트에서 정보를 받았는지 출처를 꼭 밝혀주세요!"
                        value="<%=data.source%>"
                        class="text-input"
                    />

                    <h2>💡 기타 추가 정보</h2>
                    <textarea
                        name="others"
                        placeholder="회사에 대한 추가 정보 혹은 여러분의 자유로운 의견을 써주세요(선택)"
                        class="textarea-input"
                        style="resize: none"
                    >
<%=data.others%></textarea
                    >
                    <br />
                    <!-- 수정 확인 버튼 -->
                    <div class="editContentButtons">
                        <button
                            type="button"
                            class="editButton input-file-button"
                            onclick="editPost('<%=data.jobs_id%>')"
                        >
                            수정
                        </button>
                        <button
                            type="button"
                            class="editCancelButton input-file-button"
                            onclick="editReqPost()"
                        >
                            취소
                        </button>
                    </div>
                </form>
            </div>
        </div>
        <div class="contentButtons hidden">
            <!-- 수정창 전환 버튼 -->
            <button
                class="editReqButton"
                onclick="editReqPost('<%=data.userId%>')"
            >
                수정
            </button>
            <button
                class="deleteButton"
                onclick="deletePost('<%=data.jobs_id%>')"
            >
                삭제
            </button>
        </div>
        <br />
        <!-- 댓글 -->
        <div class="comments mainBlock">
            <!-- 댓글 조회 -->
            <% for (let i= 0; i < reviewsdata.length; i++) { %>
            <div class="commentBox" id="cmt_<%=reviewsdata[i].reviews_id%>">
                <p class="writer"><%=reviewsdata[i].nickname%></p>

                <!-- 수정창 전환 시 사라짐 -->
                <span class="commentButtons">
                    <button
                        class="editReqCommentButton"
                        onclick="editReqCmt('<%=reviewsdata[i].reviews_id%>', '<%=reviewsdata[i].users_id%>')"
                    >
                        <!-- 수정창 전환 버튼 -->
                        수정
                    </button>
                    <span>|</span>
                    <button
                        class="deleteCommentButton"
                        onclick="deleteCmt('<%=reviewsdata[i].reviews_id%>', '<%=reviewsdata[i].users_id%>')"
                    >
                        삭제
                    </button>
                    <p class="registerDate"><%=reviewsdata[i].updatedAt%></p>
                </span>
                <div class="commentDiv">
                    <p class="comment"><%=reviewsdata[i].reviews_comment%></p>
                </div>

                <!-- 수정창 전환 시 나타남 -->
                <form
                    name="editComment_<%=reviewsdata[i].reviews_id%>"
                    class="editComment hiddenC"
                >
                    <textarea name="editTxt" class="editTxt"></textarea>
                    <br />
                    <button
                        type="button"
                        class="editCommentButton"
                        onclick="editCmt('<%=reviewsdata[i].reviews_id%>', '<%=data.jobs_id%>')"
                    >
                        <!-- 수정 확인 버튼 -->
                        수정
                    </button>
                    <button
                        type="button"
                        class="editCancelCommentButton"
                        onclick="editCnlCmt('<%=reviewsdata[i].reviews_id%>')"
                    >
                        취소
                    </button>
                </form>
            </div>
            <%}%>
            <!-- 댓글 등록 -->
            <form name="inputComment">
                <textarea
                    class="commentText"
                    name="commentText"
                    placeholder="댓글 입력"
                ></textarea>
                <button
                    type="button"
                    class="commentButton"
                    onclick="sendCmt('<%=data.jobs_id%>')"
                >
                    등록
                </button>
            </form>
        </div>

        <script>
            // 경력 표기 변환
            (function () {
                const level = document.querySelector(".experienceLevel");
                switch ("<%-data.levels%>") {
                    case "1":
                        level.innerText = "신입";
                        break;
                    case "2":
                        level.innerText = "경력";
                        break;
                    case "3":
                        level.innerText = "경력 무관";
                        break;
                }
            })();

            // 스택 정보 표기
            (function () {
                // 본문에 표기
                const React = "<%-data.stack.react%>";
                const Vue = "<%-data.stack.vue%>";
                const CSS = "<%-data.stack.css%>";
                const Angular = "<%-data.stack.angular%>";
                const JavaScript = "<%-data.stack.javascript%>";
                const HTML = "<%-data.stack.html%>";
                const TypeScript = "<%-data.stack.typescript%>";
                const Sass = "<%-data.stack.sass%>";
                const JSX = "<%-data.stack.jsx%>";
                const Webpack = "<%-data.stack.webpack%>";
                const stackData = {
                    React,
                    Vue,
                    CSS,
                    Angular,
                    JavaScript,
                    HTML,
                    TypeScript,
                    Sass,
                    JSX,
                    Webpack,
                };
                const result = document.querySelector(".skills");
                for (let key in stackData) {
                    if (JSON.parse(stackData[key])) {
                        let p = document.createElement("p");
                        p.innerText = key;
                        result.append(p);
                    }
                }
                // 수정창에 표기
                for (let key in stackData) {
                    if (JSON.parse(stackData[key])) {
                        const editStack = document.getElementById(`${key}`);
                        editStack.setAttribute("checked", "true");
                    }
                }
                if (result.querySelector("p") == null) {
                    let none = document.createElement("p");
                    none.innerText = "없음";
                    result.append(none);
                }
            })();

            // 수정창 날짜 표기
            (function () {
                const deadlineDate = "<%=data.deadline%>".replace(" ", "T");
                document
                    .getElementById("deadline")
                    .setAttribute("value", `${deadlineDate}`);
            })();

            // 글 작성자만 수정 삭제 버튼 표시
            (function () {
                if ("<%-data.users_id%>" == localStorage.userId) {
                    document
                        .querySelector(".contentButtons")
                        .classList.toggle("hidden");
                }
            })();

            // null인 정보 숨기기
            (function () {
                const cnt = document.querySelector(".viewContent").children;
                for (i = 0; i < cnt.length; i++) {
                    const cntText = cnt[i].querySelector("p").innerText;
                    if (cntText == "") {
                        cnt[i].classList.add("hidden");
                    }
                }
            })();

            // 글 수정창 전환
            function editReqPost(userid) {
                window.scrollTo({ left: 0, top: 0, behavior: "smooth" });
                const post = document.querySelector(".content");
                const cmt = document.querySelector(".comments");
                const btn = document.querySelector(".contentButtons");
                const onDefault = post.querySelector(".viewContent");
                const offDefault = post.querySelector(".editContent");
                cmt.classList.toggle("hidden");
                btn.classList.toggle("hidden");
                onDefault.classList.toggle("hidden");
                offDefault.classList.toggle("hidden");
                const levelRadio = document.getElementById(
                    "level_<%-data.levels%>"
                );
                levelRadio.setAttribute("checked", "true");
            }

            var imgPath = "<%=data.img_path%>";
            // 프로필 사진
            function fileUpload() {
                const fileInput = document.getElementById("img_path");
                const fileName = fileInput.value.split("\\").pop();
                imgPath = `/uploads/${fileName}`;
                const formData = new FormData();
                formData.append("img_path", fileInput.files[0]);

                axios({
                    method: "POST",
                    url: "/upload",
                    data: formData,
                    headers: {
                        "Content-Type": "multipart/form-data",
                    },
                })
                    .then((res) => {
                        const resultImage =
                            document.getElementById("resultImage");
                        resultImage.src = `/uploads/${res.data.path}`;
                    })
                    .catch((err) => console.error(err));
            }

            // 글 수정 patch /jobs
            function editPost(jobid) {
                const form = document.forms["editContent"];
                // 체크된 체크박스들의 값들을 담을 배열
                const selectedValues = [];
                // NodeList를 배열로 변환하여 순회
                Array.from(form.stack).forEach((checkbox) => {
                    if (checkbox.checked) {
                        selectedValues.push(checkbox.value);
                    }
                });
                const data = {
                    jobsId: jobid,
                    usersId: "<%-data.users_id%>",
                    img_path: imgPath,
                    companyName: form.company_name.value,
                    levels: form.levels.value,
                    introduce: form.introduce.value,
                    task: form.task.value,
                    conditions: form.conditions.value,
                    prefer: form.prefer.value,
                    welfare: form.welfare.value,
                    deadline: form.deadline.value,
                    address: form.address.value,
                    address_detail: form.address_detail.value,
                    others: form.others.value,
                    source: form.source.value,
                    stack: selectedValues,
                };

                axios({
                    url: "/jobs",
                    method: "PATCH",
                    data: data,
                })
                    .then((res) => {
                        window.scrollTo({ left: 0, top: 0 });
                        alert("수정되었습니다.");
                        document.location.reload();
                    })
                    .catch((err) => console.log(err));
            }

            // 글 삭제 delete /jobs
            function deletePost(jobid) {
                axios({
                    method: "DELETE",
                    url: "/jobs",
                    data: { jobsId: jobid },
                }).then((res) => {
                    if (res) {
                        alert(
                            "성공적으로 삭제되었습니다. 메인페이지로 돌아갑니다."
                        );
                        document.location.href = "/";
                    } else {
                        alert("게시글을 삭제할 수 없습니다.");
                    }
                });
            }

            // 댓글 등록 post /review
            function sendCmt(jobid) {
                const checkLogin = JSON.parse(localStorage.isLoggedIn);
                if (checkLogin) {
                    const form = document.forms["inputComment"];
                    const data = {
                        jobsId: jobid,
                        comment: form.commentText.value,
                        userId: localStorage.userId,
                    };
                    if (form.commentText.value.length === 0) {
                        alert("내용을 입력해주세요.");
                        return;
                    } else {
                        axios({
                            method: "POST",
                            url: "/review",
                            data: data,
                        })
                            .then((res) => {
                                alert("댓글이 등록되었습니다.");
                                document.location.reload();
                            })
                            .catch((err) => console.log(err));
                    }
                } else {
                    alert("로그인이 필요합니다.");
                    return;
                }
            }

            // 댓글 수정창 전환
            function editReqCmt(reviewid, userid) {
                if (userid == localStorage.userId) {
                    const findCmt = document.getElementById(`cmt_${reviewid}`);
                    const cmtTxt = findCmt.querySelector(".comment").innerText;
                    const onDefaultBtn =
                        findCmt.querySelector(".commentButtons");
                    const onDefaultDiv = findCmt.querySelector(".commentDiv");
                    const offDefault = findCmt.querySelector(".editComment");
                    onDefaultBtn.classList.toggle("hiddenC");
                    onDefaultDiv.classList.toggle("hiddenC");
                    offDefault.classList.toggle("hiddenC");
                    const txtbox = findCmt.querySelector("textarea");
                    txtbox.innerText = `${cmtTxt}`;
                } else {
                    alert("본인이 작성한 댓글만 수정할 수 있습니다.");
                }
            }

            function editCnlCmt(reviewid) {
                const findCmt = document.getElementById(`cmt_${reviewid}`);
                const onDefaultBtn = findCmt.querySelector(".commentButtons");
                const onDefaultDiv = findCmt.querySelector(".commentDiv");
                const offDefault = findCmt.querySelector(".editComment");
                onDefaultBtn.classList.toggle("hiddenC");
                onDefaultDiv.classList.toggle("hiddenC");
                offDefault.classList.toggle("hiddenC");
            }

            // 댓글 수정 PATCH /review
            function editCmt(reviewid, jobid) {
                const form = document.forms[`editComment_${reviewid}`];
                if (form.editTxt.value.length === 0) {
                    alert("내용을 입력해주세요.");
                    return;
                } else {
                    axios({
                        url: "/review",
                        method: "PATCH",
                        data: {
                            reviewId: reviewid,
                            comment:
                                document.forms[`editComment_${reviewid}`]
                                    .editTxt.value,
                            jobsId: jobid,
                        },
                    })
                        .then((res) => {
                            alert("댓글이 수정되었습니다.");
                            document.location.reload();
                        })
                        .catch((err) => console.log(err));
                }
            }

            // 댓글 삭제 delete /review
            function deleteCmt(reviewid, userid) {
                if (userid == localStorage.userId) {
                    axios({
                        method: "DELETE",
                        url: "/review",
                        data: { reviewId: reviewid },
                    }).then((res) => {
                        if (res) {
                            alert("댓글이 삭제되었습니다.");
                            document.location.reload();
                        } else {
                            alert("댓글을 삭제할 수 없습니다.");
                        }
                    });
                } else {
                    alert("본인이 작성한 댓글만 삭제할 수 있습니다.");
                }
            }

            // 지도 관련 script js 분리 시 오류 발생
            // 조회 시 지도 출력
            document.addEventListener("DOMContentLoaded", function () {
                // This function will be executed once the DOM is fully loaded
                // Check if the Kakao object is available
                if (typeof kakao !== "undefined") {
                    const address = "<%= data.address %>";
                    const introduceText = "<%= data.company_name %>";
                    // 주소를 좌표로 변환하는 함수
                    const geocoder = new kakao.maps.services.Geocoder();
                    geocoder.addressSearch(address, function (result, status) {
                        if (status === kakao.maps.services.Status.OK) {
                            const mapContainer = document.getElementById("map");
                            const options = {
                                center: new kakao.maps.LatLng(
                                    result[0].y,
                                    result[0].x
                                ),
                                level: 3,
                            };
                            const map = new kakao.maps.Map(
                                mapContainer,
                                options
                            );
                            // 마커 표시
                            const marker = new kakao.maps.Marker({
                                position: new kakao.maps.LatLng(
                                    result[0].y,
                                    result[0].x
                                ),
                                map: map,
                            });
                            // 인포윈도우 생성
                            const infowindow = new kakao.maps.InfoWindow({
                                content: introduceText,
                            });
                            // Open infowindow immediately
                            infowindow.open(map, marker);
                        } else {
                            console.error(
                                "주소로 좌표를 검색하는데 실패했습니다.",
                                status
                            );
                        }
                    });
                } else {
                    console.error("Kakao Maps SDK is not loaded.");
                }
            });

            var mapContainer = document.getElementById("mapEdit"); // 지도를 표시할 div
            var mapOption = {
                center: new daum.maps.LatLng(37.537187, 127.005476), // 기본 중심좌표
                level: 1, // 지도의 확대 레벨
            };
            // 지도를 미리 생성
            var map = new daum.maps.Map(mapContainer, mapOption);
            // 주소-좌표 변환 객체를 생성
            var geocoder = new daum.maps.services.Geocoder();
            // 마커를 미리 생성
            var marker = new daum.maps.Marker({
                position: new daum.maps.LatLng(37.537187, 127.005476),
                map: map,
            });
            // 페이지 로딩 시, 기본 위치 설정 함수 호출
            setDefaultLocation();
            // 기본 위치 설정 함수
            function setDefaultLocation() {
                var address = "<%= data.address %>"; // data.address 값 가져오기
                // 주소로 좌표 변환
                geocoder.addressSearch(address, function (results, status) {
                    if (status === daum.maps.services.Status.OK) {
                        var result = results[0];
                        var coords = new daum.maps.LatLng(result.y, result.x);
                        // 지도 중심을 설정
                        map.setCenter(coords);
                        // 마커를 결과값으로 받은 위치로 옮김
                        marker.setPosition(coords);
                    } else {
                        console.error(
                            "주소로 좌표를 검색하는데 실패했습니다.",
                            status
                        );
                    }
                });
            }
            // 주소 검색 함수
            function sample5_execDaumPostcode() {
                new daum.Postcode({
                    oncomplete: function (data) {
                        var addr = data.address; // 최종 주소 변수
                        // 주소 정보를 해당 필드에 넣는다.
                        document.getElementById("sample5_address").value = addr;
                        // 주소로 상세 정보를 검색
                        geocoder.addressSearch(
                            data.address,
                            function (results, status) {
                                // 정상적으로 검색이 완료됐으면
                                if (status === daum.maps.services.Status.OK) {
                                    var result = results[0]; //첫번째 결과의 값을 활용
                                    // 해당 주소에 대한 좌표를 받아서
                                    var coords = new daum.maps.LatLng(
                                        result.y,
                                        result.x
                                    );
                                    // 지도 중심을 변경한다.
                                    map.setCenter(coords);
                                    // 마커를 결과값으로 받은 위치로 옮긴다.
                                    marker.setPosition(coords);
                                }
                            }
                        );
                    },
                }).open();
            }
            // 현위치 찾기 함수
            function getCurrentLocation() {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(function (
                        position
                    ) {
                        var lat = position.coords.latitude; // 위도
                        var lng = position.coords.longitude; // 경도
                        var currentPos = new daum.maps.LatLng(lat, lng);
                        map.setCenter(currentPos);
                        marker.setPosition(currentPos);
                        // 주소로 변환하여 입력 필드에 넣기
                        geocoder.coord2Address(
                            lng,
                            lat,
                            function (result, status) {
                                if (status === daum.maps.services.Status.OK) {
                                    var address =
                                        result[0].address.address_name;
                                    document.getElementById(
                                        "sample5_address"
                                    ).value = address;
                                }
                            }
                        );
                    });
                } else {
                    alert("현위치를 찾을 수 없습니다.");
                }
            }

            // 수정 시 지도 출력
            var mapContainer = document.getElementById("mapEdit"); // 지도를 표시할 div
            var mapOption = {
                center: new daum.maps.LatLng(37.537187, 127.005476), // 기본 중심좌표
                level: 1, // 지도의 확대 레벨
            };
            // 지도를 미리 생성
            var map = new daum.maps.Map(mapContainer, mapOption);
            // 주소-좌표 변환 객체를 생성
            var geocoder = new daum.maps.services.Geocoder();
            // 마커를 미리 생성
            var marker = new daum.maps.Marker({
                position: new daum.maps.LatLng(37.537187, 127.005476),
                map: map,
            });
            // 페이지 로딩 시, 기본 위치 설정 함수 호출
            setDefaultLocation();
            // 기본 위치 설정 함수
            function setDefaultLocation() {
                var address = "<%= data.address %>"; // data.address 값 가져오기
                // 주소로 좌표 변환
                geocoder.addressSearch(address, function (results, status) {
                    if (status === daum.maps.services.Status.OK) {
                        var result = results[0];
                        var coords = new daum.maps.LatLng(result.y, result.x);
                        // 지도 중심을 설정
                        map.setCenter(coords);
                        // 마커를 결과값으로 받은 위치로 옮김
                        marker.setPosition(coords);
                    } else {
                        console.error(
                            "주소로 좌표를 검색하는데 실패했습니다.",
                            status
                        );
                    }
                });
            }
            // 주소 검색 함수
            function sample5_execDaumPostcode() {
                new daum.Postcode({
                    oncomplete: function (data) {
                        var addr = data.address; // 최종 주소 변수
                        // 주소 정보를 해당 필드에 넣는다.
                        document.getElementById("sample5_address").value = addr;
                        // 주소로 상세 정보를 검색
                        geocoder.addressSearch(
                            data.address,
                            function (results, status) {
                                // 정상적으로 검색이 완료됐으면
                                if (status === daum.maps.services.Status.OK) {
                                    var result = results[0]; //첫번째 결과의 값을 활용
                                    // 해당 주소에 대한 좌표를 받아서
                                    var coords = new daum.maps.LatLng(
                                        result.y,
                                        result.x
                                    );
                                    // 지도 중심을 변경한다.
                                    map.setCenter(coords);
                                    // 마커를 결과값으로 받은 위치로 옮긴다.
                                    marker.setPosition(coords);
                                }
                            }
                        );
                    },
                }).open();
            }
            // 현위치 찾기 함수
            function getCurrentLocation() {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(function (
                        position
                    ) {
                        var lat = position.coords.latitude; // 위도
                        var lng = position.coords.longitude; // 경도
                        var currentPos = new daum.maps.LatLng(lat, lng);
                        map.setCenter(currentPos);
                        marker.setPosition(currentPos);
                        // 주소로 변환하여 입력 필드에 넣기
                        geocoder.coord2Address(
                            lng,
                            lat,
                            function (result, status) {
                                if (status === daum.maps.services.Status.OK) {
                                    var address =
                                        result[0].address.address_name;
                                    document.getElementById(
                                        "sample5_address"
                                    ).value = address;
                                }
                            }
                        );
                    });
                } else {
                    alert("현위치를 찾을 수 없습니다.");
                }
            }
        </script>
    </body>
</html>
